namespace com.ibm.streamsx.testframe;

/**
 * The Operator *FileSink1* is a special file sink for test purposes.
 * The default function is:
 * * store all input tuples as one text line in file with name *Tuples*
 * * store all window punctuation markers as default tuple line in a file with name *WindowMarker*
 * * store all final punctuation markers as default tuple line in a file with name *FinalMarker*
 *
 * Every entry in the output file starts with the sequence number and a type specifier (t, w, f) like:
 * 	seq_=0,typ_="t"
 *
 * **Note:** Make sure that the target directory is clean before this operators is started. Otherwise the content is appended to
 * existing files if parameter *append* is true (this is the default)
 *
 * @input	Inp					The input stream to store in file. This stream must not have attributes *fname_, seq_ and typ_*
 *
 * @param	fnameTuples			The file name for the file that stores the tuples. If this parameter is empty, no file for tuples is generated. Default: *Tuples*
 * @param	fnameWindowMarker	The file name for the window punctuation markers. If this parameter is empty, no file for window punctuation markers is generated. Default: *WindowMarker*
 * @param	fnameFinalMarker	The file name for the final punctuation markers. If this parameter is empty, no file for final punctuation markers is generated. Default: *FinalMarker*
 * @param	addSeqToFnameTuple	If this parameter is true, each tuple is stored in a separate file with a unique filename. Default: *false*
 * @param	addSeqToFnameWindow	If this parameter is true, each window punctuation marker is stored in a separate file with a unique filename. Default: *false*
 * @param	addSeqToFnameFinal	If this parameter is true, each final punctuation marker is stored in a separate file with a unique filename. Default: *false*
 * @param	append				If this parameter is true, and the target file already exists, the content is appended, otherwise the file is overwritten. Default: *true*
 */
public composite FileSink1 (input Inp) {
	param
		expression<rstring> $fnameTuples:         "Tuples";
		expression<rstring> $fnameWindowMarker:   "WindowMarker";
		expression<rstring> $fnameFinalMarker:    "FinalMarker";
		expression<boolean> $addSeqToFnameTuple:  false;
		expression<boolean> $addSeqToFnameWindow: false;
		expression<boolean> $addSeqToFnameFinal:  false;
		expression<boolean> $append:              true;
	graph
		stream<tuple<rstring fname_, int64 seq_, rstring typ_>, I> FileContent as O = Custom(Inp as I) {
			logic
				state : {
					mutable int64 sequence = 0l;
				}
				onTuple I : {
					if ($fnameTuples != "") {
						mutable O ot = {};
						assignFrom(ot, I);
						if ($addSeqToFnameTuple) {
							ot.fname_ = $fnameTuples + (rstring)sequence;
						} else {
							ot.fname_ = $fnameTuples;
						}
						ot.seq_ = sequence;
						ot.typ_ = "t";
						submit(ot, O);
					}
					sequence = sequence + 1l;
				}
				onPunct I: {
					if (currentPunct() == Sys.WindowMarker) {
						if ( $fnameWindowMarker != "" ) {
							mutable O ot = {};
							if ($addSeqToFnameWindow) {
								ot.fname_ = $fnameWindowMarker + (rstring)sequence;
							} else {
								ot.fname_ = $fnameWindowMarker;
							}
							ot.seq_ = sequence;
							ot.typ_ = "w";
							submit(ot, O);
						}
					} else {
						if ( $fnameFinalMarker != "" ) {
							mutable O ot = {};
							if ($addSeqToFnameFinal) {
								ot.fname_ = $fnameFinalMarker + (rstring)sequence;
							} else {
								ot.fname_ = $fnameFinalMarker;
							}
							ot.seq_ = sequence;
							ot.typ_ = "f";
							submit(ot, O);
						}
					}
					sequence = sequence + 1l;
				}
		}

		() as Sink = FileSink(FileContent as I) {
			param
				closeMode: dynamic;
				file: fname_;
				format: txt;
				suppress: fname_;
				append: $append;
		}
}

/**
 * This function creates a custom metric of type gauge an returns true.
 *
 * @param  name        metric name
 * @param  description metric description
 * @param  initial     initial value
 * @return             true
 */
stateful boolean createMetricGauge(rstring name, rstring description, int64 initial) {
	createCustomMetric(name, description, Sys.Gauge, initial);
	return true;
}

/**
 * The Operator *Echo* echoes all input tuples and the received punctuation markers to the console.
 * When a final punctuation marker is received, the custom metric `operationComplete` is set to value 1.
 * Optionally a sequence number is printed at the beginning of the line followed by a colon.
 * The operator is always placed in partition isolation, thus the printout is never disordered.
 *
 * @input  Inp                 The input stream to echo
 *
 * @param  echoTuples         If true, the tuple content is echoed to stdout. Default: true
 * @param  echoWindowMarker   If true, the window punctuation marker is echoed to stdout. Default: true
 * @param  echoFinalMarker    If true, the final punctuation marker is echoed to stdout. Default: true
 * @param  echoSequence       If true, the sequence number is placed in front of the line. Default: false
 */
public composite Echo (input Inp) {
	param
		expression<boolean> $echoTuples: true;
		expression<boolean> $echoWindowMarker: true;
		expression<boolean> $echoFinalMarker: true;
		expression<boolean> $echoSequence: false;
	graph
		() as Sink = Custom(Inp as I) {
			logic
				state: {
					boolean metricReady = com.ibm.streamsx.testframe::createMetricGauge("operationComplete", "operation is complete, final punct received", 0l);
					mutable uint64 seq = 0ul;
					boolean echoTuples = $echoTuples;
					boolean echoWindowMarker = $echoWindowMarker;
					boolean echoFinalMarker = $echoFinalMarker;
					boolean echoSequence = $echoSequence;
				}
				onTuple I: {
					if (echoTuples) {
						if (echoSequence) {
							printStringLn((rstring)seq + ":" + (rstring)I);
						} else {
							println(I);
						}
					}
					seq++;
				}
				onPunct I: {
					if (currentPunct() == Sys.WindowMarker) {
						if (echoWindowMarker) {
							if (echoSequence) {
								printStringLn((rstring)seq + ":" + (rstring)currentPunct());
							} else {
								println(currentPunct());
							}
						}
						seq++;
					} else if (currentPunct() == Sys.FinalMarker) {
						if (echoFinalMarker) {
							if (echoSequence) {
								printStringLn((rstring)seq + ":" + (rstring)currentPunct());
							} else {
								println(currentPunct());
							}
						}
						seq++;
						setCustomMetricValue("operationComplete", 1l);
					}
				}
		}
	config
		placement : partitionIsolation;
}
